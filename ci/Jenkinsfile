pipeline {
    environment {
        registry = 'marcinwatroba/tweet-id-scrapper'
        registryCredential = 'marcinwatroba_dockerhub'
    }
    agent {
        docker {
            image 'openjdk:11-jdk'
            args '-u root -v --privileged /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    stages {
        stage('Checkout sources') {
            steps {
                git branch: 'master', credentialsId: 'markowanga_github',
                        url: 'https://github.com/markowanga/tweet-id-scrapper.git'
                sh 'rm ci/Jenkinsfile'
            }
        }
        stage('Test') {
            steps {
                sh './gradlew test'
            }
        }
        stage('Integration test') {
            steps {
                sh "apt-get update"
                sh "apt-get install -y curl"
                sh 'curl -fsSL https://get.docker.com -o get-docker.sh'
                sh 'sh get-docker.sh'
                sh 'curl -L "https://github.com/docker/compose/releases/download/1.27.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose'
                sh 'chmod +x /usr/local/bin/docker-compose'
                sh 'ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose'
                sh 'docker-compose --version'
                sh 'docker-compose -f docker-compose-integration-tests.yml pull'
                sh 'docker-compose -f docker-compose-integration-tests.yml up -d'
                sleep 20
                sh 'docker container ls -a'
                sh 'curl http://localhost:46573'
                sh './gradlew integrationTest --stacktrace'
                sh 'docker-compose -f docker-compose-integration-tests.yml stop'
                sh 'docker-compose -f docker-compose-integration-tests.yml rm --force'
            }
        }
        stage('Build') {
            steps {
                sh './gradlew bootJar'
            }
        }
        stage('Prepare docker resources') {
            steps {
                sh "mv build/libs/*.jar src/main/docker/"
            }
        }
        stage('Build & push docker') {
            steps {
                script {
                    dockerImageLatest = docker.build(registry + ":latest", './src/main/docker/')
                    docker.withRegistry('', registryCredential) {
                        dockerImageLatest.push()
                    }
                }
            }
        }
    }
    post {
        always {
            sh 'rm -rf *'
        }
//        success {}
//        unstable {}
//        failure {}
//        aborted {}
    }
}